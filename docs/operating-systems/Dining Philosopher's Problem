Problem Statement:

The dining philosophers problem states that 5 philosophers share a circular table and eat and think alternatively. 
There is a bowl of rice for each of the philosophers and 5 chopsticks. 
A philosopher needs both their right and left chopstick to eat. 
A hungry philosopher may only eat if there are both chopsticks available. 
Otherwise, a philosopher puts down their chopstick and begin thinking again.

This is a classic problem of synchronization and also represents a lot of concurrency control problems.

The solution to this problem is answered in terms of semaphores, which are variables that use operations like wait and signal increment and decrement.
In the solution given below, i is the chopstick, and we do a % 5 because this is a circular table. 
During the wait() the philosopher eats and during signal() they think.

code: 

do {
   wait( chopstick[i] );
   wait( chopstick[ (i+1) % 5] );
   //EATING THE RICE
   signal( chopstick[i] );
   signal( chopstick[ (i+1) % 5] );
   // THINKING
} while(1);

The problem with this solution is that there may be a possibility of deadlock and we want to avoid that.
So the following points can be considered:
There should be at most four philosophers on the table.
An even philosopher should pick the right chopstick and then the left chopstick while an odd philosopher
should pick the left chopstick and then the right chopstick.
A philosopher should only be allowed to pick their chopstick if both are available at the same time.

